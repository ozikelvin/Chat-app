/////////////////////////////////////////////////////
App.js
////////////////////////////////
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);
const port = process.env.PORT || 8008;
const path = require('path');
const connection = [];
const users = {};

app.use(express.static(path.join(__dirname, 'public')))

app.get('/', (req, res)=>{
    res.sendFile(__dirname + '/index.html')
})
// Initate connection
io.on('connection', (socket)=>{
    connection.push(socket);
    console.log('Connected: %s Sockets Connected', connection.length);

    socket.on('sendMessage', (data)=>{
        io.emit('newMessage', {msg: data})
    })

})
// io.on('connection', (socket)=>{
//     connection.push(socket);
//     console.log('Connected: %s Sockets Connected', connection.length);

//     socket.on('disconnect', (sockets)=>{
//         // users.splice(users.indexOf(socket.username), 1);
//         // updateUsername();
//         connection.splice(connection.indexOf(socket), 1);
//         console.log('Disconnected: %s sockets Connected', connection.length)
//     })
//     socket.on('sendMessage', (data)=>{
//         console.log(data)
//         io.emit('newMessage', {msg: data})
//     })
// })

http.listen(port, ()=>{
    console.log(`Server is listening to ${port} port`);
})
/////////////////////////////////////////////////////
html
///////////////////////
  <div class="chat-container">
        <div class="chat-header">
            <div class="log">
                <i class="fab fa-facebook-messenger"></i>
                <h3>Messenger</h3>
            </div>
            <p id="your-name">Your Name</p>
        </div>
        <!-- ////////////////////////////////////////// -->
        <div class="chat-section">
            <div class="main-wrapper">
                <div class="chat-content">
                    <div class="message">
                        <div class="message-row other-message">
                            <!-- <div class="message-title">
                    <i class="fas fa-grin-squint"></i> <span>Dev At</span>
                            </div>
                            <div class="message-text">
                                Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae, beatae!
                            </div>
                            <div class="message-time">
                                april 20
                            </div> -->
                        </div>
                        <div class="message-row you-message">
                            <!-- <div class="message-title">
                                <i class="fas fa-grin-squint"></i> <span>User 1</span>
                                        </div> -->
                                        <!-- <div class="message-text">
                                            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae, beatae!
                                        </div>
                                        <div class="message-time">
                                            april 20
                                        </div> -->
                        </div>

                    </div>
                </div>
                 <!-- //////////////////////////////////////////////////// -->
                 <form class="msg-tex" id="textForm" >
                    <input type="text"  id="msg" placeholder="Type Message here....." autocomplete="off">
                    <button id="btn-send">
                        <i class="fas fa-paper-plane"> Send</i>
                    </button>
                 </form>

            </div>
        </div>
    </div>


    //////////////////////////////////////////////////////////////////////////////////////
    css
    /////////////////////////////////////////
    *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body{
    min-height: 100vh;
    display: flex;
    justify-items: center;
    align-items: center;
}

.chat-container{
    max-width: 500px;
    width: 100%;
    border-radius: 11px;
    box-shadow: 3px 10px 28px #0b2a5b;
    overflow: hidden;
    border: 1px solid #0b2a5b;
    background: #7292c4;
    margin-left: 100px;
}
.chat-header{
    min-height: 50px;
    overflow: hidden;
    background: #0b2a5b;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #051b3f;
}
.chat-header .logo{
    display: flex;
    align-items: center;
    margin-left: 50px;
    color: rgb(81, 184, 243);
}
.logo h3{
    letter-spacing: 2px;
    margin-left: 10px;
}
.chat-header p{
    margin-right: 20px;
    cursor: pointer;
    opacity: 0.8;

}
.chat-section{
    padding: 20px;
}
.main-wrapper{
    width: 100%;
    height: 100%;
}
.chat-content{
    width: 100%;
    height: 450px;
    background: white;
    overflow: auto;
    box-shadow: inset 0 0 1px #111;
    padding: 0 10px;
    border-radius: 3px;
    scrollbar-width: none;
}

.chat-container .message{
    width: 100%;
    min-height: 450px;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}
.message-row{
    display: grid;
    grid-template-columns: 70%;
    margin-bottom: 10px;
}
.you-message{
    justify-content: end;
    justify-items: end;
}
.other-message{
    justify-content: start;
    justify-items: start;
}
.message-text{
    padding: 9px 14px;
    margin-bottom:5px;
}

.message-time{
    font-size: 13px;
    color: gray;
}

.you-message .message-text{
    background: #245fbe;
    color: white;
    border: 1px solid #245fbe;
    border-radius: 15px 15px 0 16px;
}
.other-message .message-text{
    background: #bdeb52c9;
    color: white;
    border: 1px solid #97c727;
    border-radius: 15px 15px 0 16px;
}
.message-title span{
    font-size: 12px;
    text-transform: capitalize;
}
.msg-tex{
    width: 100%;
    height: 50px;
    display: flex;
    align-items: center;
}
.msg-tex input,
.msg-tex button{
    flex: 4;
    height: 40px;
    outline: none;
    border: 1px solid #888;
    padding: 0 10px;
    border-radius: 3px;
}
.msg-tex button{
    flex: 1;
    max-width: 120px;
    cursor: pointer;
    color: rgb(81, 184, 243);
}


//////////////////////////////////////////////////////////////
new user add
///////////////////////////
 socket.emit('new user', name.val(), function(data){
                if(data){
                    formArea.hide();
                    chatBox.show();
                }else{
                    err.html(`<div class='alert alert-danger'>Sorry!! This User is already here pick a new Nickname</div>`)
                }
            });
            name.val('')
//////////////////////////////////////////////////////////////////////////
login api
/////////////////////////////////////////////////////////
Chat.findOne({user: req.body.user}).exec()
     .then(async(done) =>{
         if(!done) {
             req.io.emit('wrong username', {message: 'Wrong Username or Password'})
             console.log('Wrong User name ')
         }else{
             console.log(done.password);
             let login = await bcrypt.compare(req.body.password, done.password)
             if(!login){
                req.io.emit('wrong username', {message: 'Wrong Username or Password'})
                 console.log('Wrong password try Again')
             }else{
                    console.log('Login Successful');
                    res.status(200).json({message: 'Login successful'});
                    req.io.emit('new user', {message: 'Login Successful', user: done.user}, function(data){
                        if(!data){
                            console.log('User is logged in already')
                        }
                    })
                    Chat.find({}).limit(1)
    .exec()
    .then((data)=>{
        if(data){
            console.log('Gotten All messages');
            req.io.emit('load message', data)
        }

    })
    .catch((err) =>{
        throw err
    })
             }
         }
     })
////////////////////////////////////////////////
Object.keys(users)
